<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算引擎 on 一缕书香一缕魂</title>
    <link>http://nijian.life/tags/%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8E/</link>
    <description>Recent content in 计算引擎 on 一缕书香一缕魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 08 Feb 2021 10:23:22 +0800</lastBuildDate><atom:link href="http://nijian.life/tags/%E8%AE%A1%E7%AE%97%E5%BC%95%E6%93%8E/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可配置无状态原子计算引擎</title>
      <link>http://nijian.life/software/my/calc-engine/</link>
      <pubDate>Mon, 08 Feb 2021 10:23:22 +0800</pubDate>
      
      <guid>http://nijian.life/software/my/calc-engine/</guid>
      <description>简介 在一些业务场景中，包含了下列特定的数据及计算特征：
 业务领域内较大规模的一组数据 数据之间关联性强，存在聚合和分组计算 计算过程较为复杂，包含大量的决策表（树）计算，四则运算，聚合计算，以及简单条件规则 计算公式及过程需要基于配置完成  例如，保险领域车险团单的保费计算场景。一张车险团单可能包含了成千上万辆车，每辆车都需要计算出公式保费，然后，根据每辆车的最低最高保费调整统一的费率，再根据新的费率进行分组计算，最后，基于每辆车的公式保费进行汇总或分摊。
成千上万辆车在业务领域内属于较大规模的一组数据，但在大数据领域并不算是。此外，在上述的计算场景中，计算公式及过程的可配置性与计算性能同等重要，因此，直接使用 Flink 这类分布式处理引擎并不合适。
本文描述的可配置无状态原子计算引擎是针对上述业务计算场景的解决方案。
为什么需要可配置性 让业务人员直接参与业务规则的制定，可以减少业务实现的中间环节。例如，保险领域的精算师有能力自行设计保费计算的逻辑，在现实世界中，这些计算逻辑常常通过 Excel 工具来实现。但由于 Excel 无法有效地与系统平滑集成，例如，数据的产生来自于系统程序的运行，而不是 Excel 中的一组单元格，与此同时，Excel 的计算结果无法方便地传递给系统，因此，Excel 往往被作为保费计算的辅助工具，而不是系统运行的一个组成部分。
如果业务人员可以直接配置出计算公式和过程，并且，这些计算公式和过程可以直接作为系统运行的一部分，这将大大减少业务人员与软件开发人员之间的沟通成本，并使需求与实现之间的业务功能性误差降至最低。
此外，配置是基于计算引擎来实现的，当计算引擎趋于成熟稳定时，计算过程中非业务功能性的错误也会越来越少。
为什么需要原子化 如前文所述，在大数据领域，一张车险团单包含的数据是微不足道的，抛开可配置性概念，使用像 Flink 这样的分布式处理引擎来解决一张车险团单的计算问题是不太合适的，一方面，分布式计算引入了不必要的复杂性，另一方面，也带来了不必要的资源开销。关于 Flink 的介绍，参考 这里 。
所谓原子，就是非分布式的、无依赖的、不可分割的、高度内聚的一个单元。本文描述的计算引擎，就是这样的一个计算单元。这个计算单元的目标，是充分使用单机（或单虚拟机）的 CPU 和内存来处理适当规模的数据，并在适当的时间内产生计算结果。所谓适当，是基于业务场景的一个模糊的衡量，例如，10 s 内计算出一万辆车的保费可能是一个适当的场景。当然，适当与否最终取决于相关业务人员的共识。
原子化的计算单元，与 Flink 这样的分布式处理引擎并不冲突，相反，它是 Flink 的一个补充。例如，当业务场景需要处理海量团单时， Flink 就是一个很好的选择。一切取决于业务场景的需要。
为什么需要无状态 </description>
    </item>
    
  </channel>
</rss>
