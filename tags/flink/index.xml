<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flink on 一缕书香一缕魂</title>
    <link>http://nijian.life/tags/flink/</link>
    <description>Recent content in Flink on 一缕书香一缕魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 01 Jun 2021 11:29:32 +0800</lastBuildDate><atom:link href="http://nijian.life/tags/flink/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apache Flink</title>
      <link>http://nijian.life/software/product/flink/</link>
      <pubDate>Tue, 01 Jun 2021 11:29:32 +0800</pubDate>
      
      <guid>http://nijian.life/software/product/flink/</guid>
      <description>简介 Flink 是一个分布式数据处理框架，被用于在无边界和有边界的数据流上进行有状态的计算。 Flink 能在各种集群环境中运行，并能以本地内存运行速度在任意规模上进行计算。
 所谓有状态的计算，指的是有状态的计算任务。在分布式计算领域，一次计算被拆分成大量的计算任务，这些计算任务分布在集群中并发执行。理论上，分布式计算可使用的计算资源是无限的。
 作为框架， Flink 为寄生应用程序提供了分布式数据处理引擎，并负责维护计算任务的状态。
 寄生应用程序是指在框架约束下编写的应用程序，其运行离不开框架的支持，但同时也享受着框架提供的各项基础功能。
 Flink 之所以能在各种集群环境中运行，是因为它集成了各种集群资源管理器，例如 Hadoop YARN、 Apache Mesos 和 Kubernetes，它同时也可以作为独立集群运行。基于 Flink 的寄生应用程序，可以通过配置（例如，并行数）标识出所需的资源，并通过 Flink 从集群资源管理器请求这些资源。在发生故障的情况下， Flink 还可以通过请求新资源来自动替换发生故障的容器。
 提交或控制 Flink 寄生应用程序的所有通信都是通过 REST 调用进行的。
 Flink 具有较好的数据处理性能，所有分拆出来的计算任务都是通过访问本地（通常在内存中）状态来进行所有的计算，从而产生非常低的处理延迟。 Flink 通过定期和异步地对本地状态进行持久化存储来保证故障场景下的状态一致性。
   本地计算 Logic 可借助于像 可配置无状态原子计算引擎 这样的工具。
 下面是 Flink 在实践中已被验证的一些能力：
 处理每天处理数万亿的事件, 应用维护几 TB 大小的状态, 和 应用在数千个内核上运行。  应用场景 Flink 常常用于三种应用场景：
 事件驱动型应用（ Event-driven Applications ） 数据分析型应用（ Data Analytics Applications ） 数据管道型应用（ Data Pipeline Applications ）  事件驱动型应用   数据分析型应用   数据管道型应用   概念 运维 </description>
    </item>
    
  </channel>
</rss>
