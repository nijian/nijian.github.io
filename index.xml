<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>清尘集 on 一缕书香一缕魂</title>
    <link>https://nijian.github.io/</link>
    <description>Recent content in 清尘集 on 一缕书香一缕魂</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 23 Feb 2021 09:34:30 +0800</lastBuildDate><atom:link href="https://nijian.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git</title>
      <link>https://nijian.github.io/software/tool/git/</link>
      <pubDate>Tue, 23 Feb 2021 09:34:30 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/tool/git/</guid>
      <description>简介 git 是一个分布式版本控制系统。
 版本控制是一个系统
 </description>
    </item>
    
    <item>
      <title>Linux 常用命令</title>
      <link>https://nijian.github.io/software/tool/linuxcommand/</link>
      <pubDate>Mon, 22 Feb 2021 14:55:24 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/tool/linuxcommand/</guid>
      <description>#grep 用于查找文件中符合条件的字符串。
-v 或 &amp;ndash;invert-match : 显示不包含匹配文本的所有行</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://nijian.github.io/software/language/go/</link>
      <pubDate>Mon, 22 Feb 2021 12:19:31 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/language/go/</guid>
      <description>#依赖管理</description>
    </item>
    
    <item>
      <title>Envoy</title>
      <link>https://nijian.github.io/software/product/envoy/</link>
      <pubDate>Sat, 20 Feb 2021 18:08:35 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/product/envoy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gloo Edge</title>
      <link>https://nijian.github.io/software/product/gloo/</link>
      <pubDate>Sat, 20 Feb 2021 18:01:19 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/product/gloo/</guid>
      <description>简介 Gloo Edge 是一个 API Gateway 产品。它基于 Envoy 构建。</description>
    </item>
    
    <item>
      <title>GNU make</title>
      <link>https://nijian.github.io/software/tool/make/</link>
      <pubDate>Sat, 20 Feb 2021 17:56:11 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/tool/make/</guid>
      <description>简介 make 是一类软件工具，它常常用于软件的构建。在构建软件的过程中（例如，对程序进行编译时），其核心能力是可以自动地感知并决定对一个程序的哪些内容进行重编译，并发出相应的命令。换句话说， make 本身不是编译工具，当执行包括编译在内的各种构建任务时，它依赖于其他的软件工具程序，那些软件工具程序必须可以通过 command shell 来执行。与此同时， make 自身关注的则是如何识别那些变化的内容，以及如何触发相应的命令。
 显然，make 的使用并不局限于软件的构建。
 make 有很多实现，本文描述的是 GNU make （以下简称 make ）。另外，本文关注的是软件的构建。
常用命令 用法 要使用 make ，必须编写一个 makefile 。 makefile 描述了程序中一些文件的关系，以及更新这些文件的命令。</description>
    </item>
    
    <item>
      <title>Telepresence</title>
      <link>https://nijian.github.io/software/tool/telepresence/</link>
      <pubDate>Sat, 20 Feb 2021 15:33:05 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/tool/telepresence/</guid>
      <description></description>
    </item>
    
    <item>
      <title>软件开发工作环境搭建</title>
      <link>https://nijian.github.io/software/env/installation/</link>
      <pubDate>Sat, 20 Feb 2021 15:25:44 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/env/installation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Calc Engine</title>
      <link>https://nijian.github.io/software/my/calc-engine/</link>
      <pubDate>Mon, 08 Feb 2021 10:23:22 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/my/calc-engine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AWS 术语</title>
      <link>https://nijian.github.io/software/cloud/aws-concept/</link>
      <pubDate>Fri, 05 Feb 2021 16:06:03 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/cloud/aws-concept/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AWS Lambda</title>
      <link>https://nijian.github.io/software/cloud/aws-lambda/</link>
      <pubDate>Fri, 05 Feb 2021 15:00:18 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/cloud/aws-lambda/</guid>
      <description>Lambda 函数调用 同步调用 使用 AWS CLI 或某种语言（目前支持 Go，Java，C#，Ruby，Python，Node.js，PowerShell）的 SDK 可以发起同步调用。值得注意的是，最终触发 Lambda 函数的事件仍然是由下列 AWS 服务完成的：
 弹性负载均衡（Elastic Load Balancing）  该服务支持把 Lambda 作为应用负载均衡器（Application Load Balancer）的目标   Amazon Cognito Amazon Lex Amazon Alexa Amazon API Gateway Amazon CloudFront ( Lambda@Edge ) Amazon Kinesis Data Firehose  关于弹性负载均衡 弹性负载均衡（Elastic Load Balancing）服务属于联网和内容分发服务大类，该服务可以转发流量至可用区内的各类目标，例如，EC2 实例，容器，IP 地址。它会监控目标的健康状况，并把流量转发至健康的目标。弹性负载均衡还会根据流量变化来对负载均衡器进行自动伸缩。
弹性负载均衡服务支持下列负载均衡器：
 应用负载均衡器（Application Load Balancer） 网络负载均衡器（Network Load Balancer） 网关负载均衡器（Gateway Load Balancer） 传统负载均衡器（Classic Load Balancer）  关于负载均衡器 负载均衡器（Load Balancer）为客户端提供一个单点服务，流量分发对客户端来说是透明的。
负载均衡器包含一个或多个监听器（listener）。监听器通过配置的协议和端口接收来自客户端的请求，而定义在监听器上的规则（rule）则决定了如何把请求路由到已注册的目标。每个规则都由优先级、条件、以及活动组成。当条件满足时，执行相应的活动。</description>
    </item>
    
    <item>
      <title>Excel决策表</title>
      <link>https://nijian.github.io/software/my/xltxdt/</link>
      <pubDate>Wed, 03 Feb 2021 15:19:13 +0800</pubDate>
      
      <guid>https://nijian.github.io/software/my/xltxdt/</guid>
      <description>构思   图1   场景   图2   图2展示了Excel决策表设计时的场景。运行时场景较为丰富，且与业务关系紧密，不再赘述。这里只描述Excel决策表引擎的接口方法，即输入xltx文件，输出适配go-tree库的tree对象。
分析模型 Excel模板定义与决策表概念及后续的解析密切相关，经初步分析，引入下面几个概念：
 条件列（condition column） 条件（condition） 结论列（conclusion column） 结论（conclusion） 无法匹配（missing） 列类型（column type） 列值类型（column value type） 列名（column name） 布尔表达式（bool expression）  </description>
    </item>
    
    <item>
      <title>AWS</title>
      <link>https://nijian.github.io/software/cloud/aws/</link>
      <pubDate>Fri, 01 Jan 2021 10:58:08 -0400</pubDate>
      
      <guid>https://nijian.github.io/software/cloud/aws/</guid>
      <description>简介 Amazon Web Services(AWS) 是一个云平台，拥有全球化的云基础设施，目前在全球24个地理区域运营着77个可用区。
AWS提供了大量基于云的全球性服务，其中包括：
 计算 存储 数据库 分析 联网 移动产品 开发人员工具 管理工具 物联网 安全性 企业应用程序  常用命令 安装 awscli
sudo apt install awscli 查看 aws 版本
aws --version 配置 awscli
aws configure </description>
    </item>
    
    <item>
      <title>AWS计算服务</title>
      <link>https://nijian.github.io/software/cloud/compute/</link>
      <pubDate>Fri, 01 Jan 2021 10:58:08 -0400</pubDate>
      
      <guid>https://nijian.github.io/software/cloud/compute/</guid>
      <description>AWS计算服务
   类别 服务描述     实例（虚拟机） 安全并且可以调整大小的云计算容量（虚拟服务器）   Mike 32    </description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://nijian.github.io/software/tool/hugo/</link>
      <pubDate>Fri, 01 Jan 2021 10:58:08 -0400</pubDate>
      
      <guid>https://nijian.github.io/software/tool/hugo/</guid>
      <description>简介 Hugo 是一个用 Go 语言编写的静态站点生成器。从技术上来说， Hugo 以某个目录下的文件和模板为输入，运行后可以创建一个完整的 Web 站点。
常用命令  创建新站点  hugo new site foo  foo 是站点名称
  添加 theme  echo &amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml  对于使用 hugo new site 创建的缺省站点，配置简化存放在根目录下的 config.toml 中。通过上述命令，可在该配置文件中添加一条指令。 theme 的获取及安装可参考 https://gohugo.io/getting-started/quick-start/
  创建文章  hugo new software/env/installation.md  software 是 category ， installation.md 是文件名称。使用此命令可以根据 archetype 自动生成一些内容，例如 title 等。
  启动本地 hugo server 用于调试  hugo server -t ananke  ananke 是 theme 名称</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://nijian.github.io/software/platform/kubernetes/</link>
      <pubDate>Fri, 01 Jan 2021 10:58:08 -0400</pubDate>
      
      <guid>https://nijian.github.io/software/platform/kubernetes/</guid>
      <description>Kubernetes简介 Kubernetes是一个可移植，可扩展的开源平台，用于管理容器化的负载和服务。容器技术非常有利于实现声明式配置和运行自动化。
容器技术的演化 容器与虚拟机技术类似，拥有自己的文件系统、共享CPU和Memory、以及独立的进程空间，不同之处在于，容器之间共享OS。因此，容器技术相比与虚拟机技术，更加轻量化。</description>
    </item>
    
    <item>
      <title>工具</title>
      <link>https://nijian.github.io/software/tool/tool/</link>
      <pubDate>Fri, 01 Jan 2021 10:58:08 -0400</pubDate>
      
      <guid>https://nijian.github.io/software/tool/tool/</guid>
      <description>在软件构建过程中，经常需要借助于一些工具。例如，在构思设计的初始阶段，使用思维导图来粗略地罗列设计约束，设计目标，软件的主要特性，设计相关的一些基本候选决策；在设计阶段，使用建模工具来捕捉用例，建立业务模型，设计软件实现模型；在编写程序的阶段，使用集成开发工具来高效地录入、重构、单元测试、调试代码，使用正则表达式工具来测试和调试正则表达式的正确性；在集成测试阶段，使用代理工具，把本地的微服务切换进远程的 Kubernetes 环境等等。
软件工具种类繁多。工具，编程语言，以及开发的内容构成了软件开发的领域。本文尝试系统地整理软件构建阶段及相关的工具。
在线绘图 https://www.diagrams.net/
在线 json 编辑器 https://jsoneditoronline.org/
静态站点生成器 Hugo
https://gohugo.io/</description>
    </item>
    
    <item>
      <title>软件基本特性</title>
      <link>https://nijian.github.io/software/software/</link>
      <pubDate>Fri, 01 Jan 2021 10:58:08 -0400</pubDate>
      
      <guid>https://nijian.github.io/software/software/</guid>
      <description></description>
    </item>
    
    <item>
      <title>遥测</title>
      <link>https://nijian.github.io/software/observability/telemetry/</link>
      <pubDate>Fri, 01 Jan 2021 10:58:08 -0400</pubDate>
      
      <guid>https://nijian.github.io/software/observability/telemetry/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
